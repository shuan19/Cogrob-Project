from unified_planning.shortcuts import *
from unified_planning.model.metrics import *
from unified_planning.io import PDDLWriter
import warnings
warnings.simplefilter("ignore", UserWarning)
import unified_planning as up

def Get_Total_Cost(plan, mac):
    total_cost = 0
    for a in plan.actions:
        total_cost += mac[a.action]._content.payload
    return total_cost

def main():
    location = UserType("location")

    # Creating predicates
    At = Fluent("At", BoolType(), loc=location)
    Has_plate = Fluent("Has_plate", BoolType(), loc=location)
    plate_in_hand = Fluent("plate_in_hand", BoolType())
    fish_in_hand = Fluent("fish_in_hand", BoolType())
    Placed_in = Fluent("Placed_in", BoolType())
    Has_pot = Fluent("Has_pot", BoolType(), loc=location)
    pot_in_hand = Fluent("pot_in_hand", BoolType())
    Cooked = Fluent("Cooked", BoolType())
    Chopped = Fluent("Chopped", BoolType())
    Fried = Fluent("Fried",BoolType())
    Has_rice = Fluent("Has_rice", BoolType(), loc=location)
    Has_fish = Fluent("Has_fish", BoolType(), loc=location)
    Has_nori = Fluent("Has_nori", BoolType(), loc=location)
    rice_in_plate = Fluent("rice_in_plate", BoolType())
    fish_in_plate = Fluent("fish_in_plate", BoolType())
    nori_in_plate = Fluent("nori_in_plate", BoolType())
    Can_cook = Fluent("Can_cook", BoolType(), loc=location)
    Can_chop = Fluent("Can_chop", BoolType(), loc=location)
    Has_customer = Fluent("Has_customer", BoolType(), loc=location)
    Served = Fluent("Served", BoolType())
    Distance1 = Fluent("Distance1", BoolType(), l_from=location,l_to=location)
    Distance2 = Fluent("Distance2", BoolType(), l_from=location,l_to=location)
    Distance3 = Fluent("Distance3", BoolType(), l_from=location,l_to=location)
    Distance4 = Fluent("Distance4", BoolType(), l_from=location,l_to=location)
    Distance5 = Fluent("Distance5", BoolType(), l_from=location,l_to=location)
    Distance6 = Fluent("Distance6", BoolType(), l_from=location,l_to=location)
    Distance7 = Fluent("Distance7", BoolType(), l_from=location,l_to=location)
    Distance8 = Fluent("Distance8", BoolType(), l_from=location,l_to=location)
    Distance9 = Fluent("Distance9", BoolType(), l_from=location,l_to=location)
    Distance10 = Fluent("Distance10", BoolType(), l_from=location,l_to=location)
    Distance11 = Fluent("Distance11", BoolType(), l_from=location,l_to=location)
    Distance12 = Fluent("Distance12", BoolType(), l_from=location,l_to=location)

    # Create actions
    take_pot = InstantaneousAction("take_pot", loc=location)
    loc = take_pot.parameter("loc")
    take_pot.add_precondition(At(loc))
    take_pot.add_precondition(Has_pot(loc))
    take_pot.add_precondition(Not(pot_in_hand))
    take_pot.add_precondition(Not(plate_in_hand))
    take_pot.add_effect(pot_in_hand,True)

    take_plate = InstantaneousAction("take_plate", loc=location)
    loc = take_plate.parameter("loc")
    take_plate.add_precondition(At(loc))
    take_plate.add_precondition(Has_plate(loc))
    take_plate.add_precondition(Not(plate_in_hand))
    take_plate.add_precondition(Not(pot_in_hand))
    take_plate.add_effect(plate_in_hand,True)

    collect_rice = InstantaneousAction("collect_rice", loc=location)
    loc = collect_rice.parameter("loc")
    collect_rice.add_precondition(At(loc))
    collect_rice.add_precondition(Has_rice(loc))
    collect_rice.add_precondition(pot_in_hand)
    collect_rice.add_precondition(Not(plate_in_hand))
    collect_rice.add_precondition(Not(Cooked))
    collect_rice.add_precondition(Not(Placed_in))
    collect_rice.add_effect(Placed_in,True)

    cook_rice = InstantaneousAction("cook_rice", loc=location)
    loc = cook_rice.parameter("loc")
    cook_rice.add_precondition(At(loc))
    cook_rice.add_precondition(Can_cook(loc))
    cook_rice.add_precondition(Placed_in)
    cook_rice.add_precondition(pot_in_hand)
    cook_rice.add_precondition(Not(plate_in_hand))
    cook_rice.add_effect(Cooked,True)
    cook_rice.add_effect(pot_in_hand,False)

    collect_fish = InstantaneousAction("collect_fish", loc=location)
    loc = collect_fish.parameter("loc")
    collect_fish.add_precondition(At(loc))
    collect_fish.add_precondition(Has_fish(loc))
    collect_fish.add_precondition(Not(plate_in_hand))
    collect_fish.add_precondition(Not(pot_in_hand))
    collect_fish.add_precondition(Not(Chopped))
    collect_fish.add_precondition(Not(fish_in_hand))
    collect_fish.add_effect(fish_in_hand,True)

    chop_fish = InstantaneousAction("chop_fish", loc=location)
    loc = chop_fish.parameter("loc")
    chop_fish.add_precondition(At(loc))
    chop_fish.add_precondition(Can_chop(loc))
    chop_fish.add_precondition(Not(plate_in_hand))
    chop_fish.add_precondition(Not(pot_in_hand))
    chop_fish.add_precondition(fish_in_hand)
    chop_fish.add_effect(Chopped,True)

    fry_fish = InstantaneousAction("fry_fish", loc=location)
    loc = fry_fish.parameter("loc")
    fry_fish.add_precondition(At(loc))
    fry_fish.add_precondition(Can_cook(loc))
    fry_fish.add_precondition(Not(plate_in_hand))
    fry_fish.add_precondition(Not(pot_in_hand))
    fry_fish.add_precondition(fish_in_hand)
    fry_fish.add_precondition(Chopped)
    fry_fish.add_effect(Fried,True)

    collect_processed_rice = InstantaneousAction("collect_processed_rice", loc=location)
    loc = collect_processed_rice.parameter("loc")
    collect_processed_rice.add_precondition(At(loc))
    collect_processed_rice.add_precondition(Can_cook(loc))
    collect_processed_rice.add_precondition(plate_in_hand)
    collect_processed_rice.add_precondition(Not(pot_in_hand))
    collect_processed_rice.add_precondition(Cooked)
    collect_processed_rice.add_precondition(Not(rice_in_plate))
    collect_processed_rice.add_effect(rice_in_plate,True)

    collect_processed_fish = InstantaneousAction("collect_processed_fish", loc=location)
    loc = collect_processed_fish.parameter("loc")
    collect_processed_fish.add_precondition(At(loc))
    collect_processed_fish.add_precondition(Can_chop(loc))
    collect_processed_fish.add_precondition(plate_in_hand)
    collect_processed_fish.add_precondition(Not(pot_in_hand))
    collect_processed_fish.add_precondition(Chopped)
    collect_processed_fish.add_precondition(Fried)
    collect_processed_fish.add_precondition(Not(fish_in_plate))
    collect_processed_fish.add_effect(fish_in_plate,True)

    collect_nori = InstantaneousAction("collect_nori", loc=location)
    loc = collect_nori.parameter("loc")
    collect_nori.add_precondition(At(loc))
    collect_nori.add_precondition(Has_nori(loc))
    collect_nori.add_precondition(plate_in_hand)
    collect_nori.add_precondition(Not(pot_in_hand))
    collect_nori.add_precondition(Not(nori_in_plate))
    collect_nori.add_effect(nori_in_plate,True)

    serve = InstantaneousAction("serve", loc=location)
    loc = serve.parameter("loc")
    serve.add_precondition(At(loc))
    serve.add_precondition(Has_customer(loc))
    serve.add_precondition(rice_in_plate)
    serve.add_precondition(fish_in_plate)
    serve.add_precondition(nori_in_plate)
    serve.add_precondition(Not(Served))
    serve.add_effect(Served,True)

    Travel_distance_1 = InstantaneousAction("Travel_distance_1", l_from=location, l_to=location)
    l_from = Travel_distance_1.parameter("l_from")
    l_to = Travel_distance_1.parameter("l_to")
    Travel_distance_1.add_precondition(At(l_from))
    Travel_distance_1.add_precondition(Not(At(l_to)))
    Travel_distance_1.add_precondition(Distance1(l_from,l_to))
    Travel_distance_1.add_effect(At(l_from),False)
    Travel_distance_1.add_effect(At(l_to),True)

    Travel_distance_2 = InstantaneousAction("Travel_distance_2", l_from=location, l_to=location)
    l_from = Travel_distance_2.parameter("l_from")
    l_to = Travel_distance_2.parameter("l_to")
    Travel_distance_2.add_precondition(At(l_from))
    Travel_distance_2.add_precondition(Not(At(l_to)))
    Travel_distance_2.add_precondition(Distance2(l_from,l_to))
    Travel_distance_2.add_effect(At(l_from),False)
    Travel_distance_2.add_effect(At(l_to),True)

    Travel_distance_3 = InstantaneousAction("Travel_distance_3", l_from=location, l_to=location)
    l_from = Travel_distance_3.parameter("l_from")
    l_to = Travel_distance_3.parameter("l_to")
    Travel_distance_3.add_precondition(At(l_from))
    Travel_distance_3.add_precondition(Not(At(l_to)))
    Travel_distance_3.add_precondition(Distance3(l_from,l_to))
    Travel_distance_3.add_effect(At(l_from),False)
    Travel_distance_3.add_effect(At(l_to),True)

    Travel_distance_4 = InstantaneousAction("Travel_distance_4", l_from=location, l_to=location)
    l_from = Travel_distance_4.parameter("l_from")
    l_to = Travel_distance_4.parameter("l_to")
    Travel_distance_4.add_precondition(At(l_from))
    Travel_distance_4.add_precondition(Not(At(l_to)))
    Travel_distance_4.add_precondition(Distance4(l_from,l_to))
    Travel_distance_4.add_effect(At(l_from),False)
    Travel_distance_4.add_effect(At(l_to),True)

    Travel_distance_5 = InstantaneousAction("Travel_distance_5", l_from=location, l_to=location)
    l_from = Travel_distance_5.parameter("l_from")
    l_to = Travel_distance_5.parameter("l_to")
    Travel_distance_5.add_precondition(At(l_from))
    Travel_distance_5.add_precondition(Not(At(l_to)))
    Travel_distance_5.add_precondition(Distance5(l_from,l_to))
    Travel_distance_5.add_effect(At(l_from),False)
    Travel_distance_5.add_effect(At(l_to),True)

    Travel_distance_6 = InstantaneousAction("Travel_distance_6", l_from=location, l_to=location)
    l_from = Travel_distance_6.parameter("l_from")
    l_to = Travel_distance_6.parameter("l_to")
    Travel_distance_6.add_precondition(At(l_from))
    Travel_distance_6.add_precondition(Not(At(l_to)))
    Travel_distance_6.add_precondition(Distance6(l_from,l_to))
    Travel_distance_6.add_effect(At(l_from),False)
    Travel_distance_6.add_effect(At(l_to),True)

    Travel_distance_7 = InstantaneousAction("Travel_distance_7", l_from=location, l_to=location)
    l_from = Travel_distance_7.parameter("l_from")
    l_to = Travel_distance_7.parameter("l_to")
    Travel_distance_7.add_precondition(At(l_from))
    Travel_distance_7.add_precondition(Not(At(l_to)))
    Travel_distance_7.add_precondition(Distance7(l_from,l_to))
    Travel_distance_7.add_effect(At(l_from),False)
    Travel_distance_7.add_effect(At(l_to),True)

    Travel_distance_8 = InstantaneousAction("Travel_distance_8", l_from=location, l_to=location)
    l_from = Travel_distance_8.parameter("l_from")
    l_to = Travel_distance_8.parameter("l_to")
    Travel_distance_8.add_precondition(At(l_from))
    Travel_distance_8.add_precondition(Not(At(l_to)))
    Travel_distance_8.add_precondition(Distance8(l_from,l_to))
    Travel_distance_8.add_effect(At(l_from),False)
    Travel_distance_8.add_effect(At(l_to),True)

    Travel_distance_9 = InstantaneousAction("Travel_distance_9", l_from=location, l_to=location)
    l_from = Travel_distance_9.parameter("l_from")
    l_to = Travel_distance_9.parameter("l_to")
    Travel_distance_9.add_precondition(At(l_from))
    Travel_distance_9.add_precondition(Not(At(l_to)))
    Travel_distance_9.add_precondition(Distance9(l_from,l_to))
    Travel_distance_9.add_effect(At(l_from),False)
    Travel_distance_9.add_effect(At(l_to),True)

    Travel_distance_10 = InstantaneousAction("Travel_distance_10", l_from=location, l_to=location)
    l_from = Travel_distance_10.parameter("l_from")
    l_to = Travel_distance_10.parameter("l_to")
    Travel_distance_10.add_precondition(At(l_from))
    Travel_distance_10.add_precondition(Not(At(l_to)))
    Travel_distance_10.add_precondition(Distance10(l_from,l_to))
    Travel_distance_10.add_effect(At(l_from),False)
    Travel_distance_10.add_effect(At(l_to),True)

    Travel_distance_11 = InstantaneousAction("Travel_distance_11", l_from=location, l_to=location)
    l_from = Travel_distance_11.parameter("l_from")
    l_to = Travel_distance_11.parameter("l_to")
    Travel_distance_11.add_precondition(At(l_from))
    Travel_distance_11.add_precondition(Not(At(l_to)))
    Travel_distance_11.add_precondition(Distance11(l_from,l_to))
    Travel_distance_11.add_effect(At(l_from),False)
    Travel_distance_11.add_effect(At(l_to),True)

    Travel_distance_12 = InstantaneousAction("Travel_distance_12", l_from=location, l_to=location)
    l_from = Travel_distance_12.parameter("l_from")
    l_to = Travel_distance_12.parameter("l_to")
    Travel_distance_12.add_precondition(At(l_from))
    Travel_distance_12.add_precondition(Not(At(l_to)))
    Travel_distance_12.add_precondition(Distance12(l_from,l_to))
    Travel_distance_12.add_effect(At(l_from),False)
    Travel_distance_12.add_effect(At(l_to),True)

    # Declaring objets
    rice_p = Object("rice_ingredient_box",location)
    fish_p = Object("fish_ingredient_box",location)
    nori_p = Object("nori_ingredient_box",location)
    rack = Object("plate_rack",location)
    stove = Object("stove",location)
    board = Object("cutting_board",location)
    cus = Object("customer",location)

    # Loading the domain into the problem and adding objects
    problem_fried_salmon_sushi = Problem("fried_salmon_sushi")
    problem_fried_salmon_sushi.add_objects([rice_p,fish_p,nori_p,rack,stove,board,cus])
    problem_fried_salmon_sushi.add_fluent(At, default_initial_value=False)
    problem_fried_salmon_sushi.add_fluent(Has_plate, default_initial_value=False)
    problem_fried_salmon_sushi.add_fluent(plate_in_hand, default_initial_value=False)
    problem_fried_salmon_sushi.add_fluent(fish_in_hand, default_initial_value=False)
    problem_fried_salmon_sushi.add_fluent(Placed_in, default_initial_value=False)
    problem_fried_salmon_sushi.add_fluent(Has_pot, default_initial_value=False)
    problem_fried_salmon_sushi.add_fluent(pot_in_hand, default_initial_value=False)
    problem_fried_salmon_sushi.add_fluent(Cooked, default_initial_value=False)
    problem_fried_salmon_sushi.add_fluent(Chopped, default_initial_value=False)
    problem_fried_salmon_sushi.add_fluent(Fried, default_initial_value=False)
    problem_fried_salmon_sushi.add_fluent(Has_rice, default_initial_value=False)
    problem_fried_salmon_sushi.add_fluent(Has_fish, default_initial_value=False)
    problem_fried_salmon_sushi.add_fluent(Has_nori, default_initial_value=False)
    problem_fried_salmon_sushi.add_fluent(rice_in_plate, default_initial_value=False)
    problem_fried_salmon_sushi.add_fluent(fish_in_plate, default_initial_value=False)
    problem_fried_salmon_sushi.add_fluent(nori_in_plate, default_initial_value=False)
    problem_fried_salmon_sushi.add_fluent(Can_cook, default_initial_value=False)
    problem_fried_salmon_sushi.add_fluent(Can_chop, default_initial_value=False)
    problem_fried_salmon_sushi.add_fluent(Has_customer, default_initial_value=False)
    problem_fried_salmon_sushi.add_fluent(Served, default_initial_value=False)
    problem_fried_salmon_sushi.add_fluent(Distance1, default_initial_value=False)
    problem_fried_salmon_sushi.add_fluent(Distance2, default_initial_value=False)
    problem_fried_salmon_sushi.add_fluent(Distance3, default_initial_value=False)
    problem_fried_salmon_sushi.add_fluent(Distance4, default_initial_value=False)
    problem_fried_salmon_sushi.add_fluent(Distance5, default_initial_value=False)
    problem_fried_salmon_sushi.add_fluent(Distance6, default_initial_value=False)
    problem_fried_salmon_sushi.add_fluent(Distance7, default_initial_value=False)
    problem_fried_salmon_sushi.add_fluent(Distance8, default_initial_value=False)
    problem_fried_salmon_sushi.add_fluent(Distance9, default_initial_value=False)
    problem_fried_salmon_sushi.add_fluent(Distance10, default_initial_value=False)
    problem_fried_salmon_sushi.add_fluent(Distance11, default_initial_value=False)
    problem_fried_salmon_sushi.add_fluent(Distance12, default_initial_value=False)
    problem_fried_salmon_sushi.add_action(take_pot)
    problem_fried_salmon_sushi.add_action(take_plate)
    problem_fried_salmon_sushi.add_action(collect_rice)
    problem_fried_salmon_sushi.add_action(cook_rice)
    problem_fried_salmon_sushi.add_action(collect_fish)
    problem_fried_salmon_sushi.add_action(chop_fish)
    problem_fried_salmon_sushi.add_action(fry_fish)
    problem_fried_salmon_sushi.add_action(collect_processed_rice)
    problem_fried_salmon_sushi.add_action(collect_processed_fish)
    problem_fried_salmon_sushi.add_action(collect_nori)
    problem_fried_salmon_sushi.add_action(serve)
    problem_fried_salmon_sushi.add_action(Travel_distance_1)
    problem_fried_salmon_sushi.add_action(Travel_distance_2)
    problem_fried_salmon_sushi.add_action(Travel_distance_3)
    problem_fried_salmon_sushi.add_action(Travel_distance_4)
    problem_fried_salmon_sushi.add_action(Travel_distance_5)
    problem_fried_salmon_sushi.add_action(Travel_distance_6)
    problem_fried_salmon_sushi.add_action(Travel_distance_7)
    problem_fried_salmon_sushi.add_action(Travel_distance_8)
    problem_fried_salmon_sushi.add_action(Travel_distance_9)
    problem_fried_salmon_sushi.add_action(Travel_distance_10)
    problem_fried_salmon_sushi.add_action(Travel_distance_11)
    problem_fried_salmon_sushi.add_action(Travel_distance_12)

    mac = {take_pot:Int(0), take_plate:Int(0), collect_rice:Int(0), cook_rice:Int(0), collect_fish:Int(0), chop_fish:Int(0), fry_fish:Int(0), collect_processed_rice:Int(0), collect_processed_fish:Int(0), collect_nori:Int(0), serve:Int(0), Travel_distance_1:Int(37849), Travel_distance_2:Int(28849), Travel_distance_3:Int(20566), Travel_distance_4:Int(33849), Travel_distance_5:Int(22566), Travel_distance_6:Int(22566), Travel_distance_7:Int(26566), Travel_distance_8:Int(19560), Travel_distance_9:Int(34849), Travel_distance_10:Int(41849), Travel_distance_11:Int(58130), Travel_distance_12:Int(77410)} # This is the dictionary that stores the action costs
    problem_fried_salmon_sushi.add_quality_metric(up.model.metrics.MinimizeActionCosts(mac))

    # Declaring the initial state
    problem_fried_salmon_sushi.set_initial_value(At(rack),True)
    problem_fried_salmon_sushi.set_initial_value(Has_plate(rack),True)
    problem_fried_salmon_sushi.set_initial_value(Has_pot(rack),True)
    problem_fried_salmon_sushi.set_initial_value(Has_rice(rice_p),True)
    problem_fried_salmon_sushi.set_initial_value(Has_fish(fish_p),True)
    problem_fried_salmon_sushi.set_initial_value(Has_nori(nori_p),True)
    problem_fried_salmon_sushi.set_initial_value(Can_cook(stove),True)
    problem_fried_salmon_sushi.set_initial_value(Can_chop(board),True)
    problem_fried_salmon_sushi.set_initial_value(Has_customer(cus),True)
    problem_fried_salmon_sushi.set_initial_value(Distance1(rice_p,stove),True)
    problem_fried_salmon_sushi.set_initial_value(Distance1(stove,rice_p),True)
    problem_fried_salmon_sushi.set_initial_value(Distance2(rice_p,rack),True)
    problem_fried_salmon_sushi.set_initial_value(Distance2(rack,rice_p),True)
    problem_fried_salmon_sushi.set_initial_value(Distance3(rack,stove),True)
    problem_fried_salmon_sushi.set_initial_value(Distance3(stove,rack),True)
    problem_fried_salmon_sushi.set_initial_value(Distance4(rack,nori_p),True)
    problem_fried_salmon_sushi.set_initial_value(Distance4(nori_p,rack),True)
    problem_fried_salmon_sushi.set_initial_value(Distance5(rack,board),True)
    problem_fried_salmon_sushi.set_initial_value(Distance5(board,rack),True)
    problem_fried_salmon_sushi.set_initial_value(Distance6(stove,fish_p),True)
    problem_fried_salmon_sushi.set_initial_value(Distance6(fish_p,stove),True)
    problem_fried_salmon_sushi.set_initial_value(Distance7(stove,board),True)
    problem_fried_salmon_sushi.set_initial_value(Distance7(board,stove),True)
    problem_fried_salmon_sushi.set_initial_value(Distance8(fish_p,board),True)
    problem_fried_salmon_sushi.set_initial_value(Distance8(board,fish_p),True)
    problem_fried_salmon_sushi.set_initial_value(Distance9(board,nori_p),True)
    problem_fried_salmon_sushi.set_initial_value(Distance9(nori_p,board),True)
    problem_fried_salmon_sushi.set_initial_value(Distance10(nori_p,cus),True)
    problem_fried_salmon_sushi.set_initial_value(Distance10(cus,nori_p),True)
    problem_fried_salmon_sushi.set_initial_value(Distance11(board,cus),True)
    problem_fried_salmon_sushi.set_initial_value(Distance11(cus,board),True)
    problem_fried_salmon_sushi.set_initial_value(Distance12(stove,cus),True)
    problem_fried_salmon_sushi.set_initial_value(Distance12(cus,stove),True)

    # Setting the goals
    problem_fried_salmon_sushi.add_goal(At(cus))
    problem_fried_salmon_sushi.add_goal(Served)

    # Solving the problem
    up.shortcuts.get_env().credits_stream = None
    with OneshotPlanner(name="fast-downward-opt") as planner:
        result = planner.solve(problem_fried_salmon_sushi)
        plan = result.plan
        if plan is not None:
            print("%s returned:" % planner.name)
            print(plan)
        else:
            print("No plan found.")

    # This function will display the total cost of the solution
    total_cost = Get_Total_Cost(plan, mac)/1000
    print(f"\nTotal Distance of the Optimal Path: {total_cost} meters")

    # Writing the PDDl files
    w = PDDLWriter(problem_fried_salmon_sushi)
    w.write_domain('domain_fried_salmon_sushi.pddl')
    w.write_problem('problem_fried_salmon_sushi.pddl')
    return

if __name__ == '__main__':
    main()
